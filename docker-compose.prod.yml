services:
  caddy:
    build:
      context: .
      dockerfile: Dockerfile.caddy
    container_name: esportpro-caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - caddy_data:/data
      - caddy_config:/config
      - caddy_logs:/var/log/caddy
    environment:
      - DOMAIN=${DOMAIN:-esportpro.cloud}
    networks:
      - esportpro-network
    depends_on:
      - app
      - matomo
      - glitchtip

  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: esportpro-app
    restart: unless-stopped
    volumes:
      - app_logs:/app/tmp/logs
    environment:
      - NODE_ENV=production
      - TZ=${TZ:-UTC}
      - PORT=3333
      - HOST=0.0.0.0
      - LOG_LEVEL=${LOG_LEVEL}
      - APP_KEY=${APP_KEY}
      - DB_CONNECTION=${DB_CONNECTION}
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE}
      - SESSION_DRIVER=${SESSION_DRIVER}
      # Redis configuration for BullMQ
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      # SMTP configuration for email sending
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    networks:
      - esportpro-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "node", "ace", "list:routes" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:16-alpine
    container_name: esportpro-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - esportpro-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_DATABASE}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Matomo Analytics
  matomo:
    image: matomo:latest
    container_name: esportpro-matomo
    restart: unless-stopped
    environment:
      - MATOMO_DATABASE_HOST=matomo_db
      - MATOMO_DATABASE_ADAPTER=mysql
      - MATOMO_DATABASE_TABLES_PREFIX=matomo_
      - MATOMO_DATABASE_USERNAME=${MATOMO_DB_USER:-matomo}
      - MATOMO_DATABASE_PASSWORD=${MATOMO_DB_PASSWORD:-matomo_password}
      - MATOMO_DATABASE_DBNAME=${MATOMO_DB_NAME:-matomo}
    volumes:
      - matomo_data:/var/www/html
    networks:
      - esportpro-network
    depends_on:
      matomo_db:
        condition: service_healthy

  matomo_db:
    image: mariadb:11
    container_name: esportpro-matomo-db
    restart: unless-stopped
    command: --max-allowed-packet=64MB
    environment:
      - MYSQL_ROOT_PASSWORD=${MATOMO_DB_ROOT_PASSWORD:-root_password}
      - MYSQL_DATABASE=${MATOMO_DB_NAME:-matomo}
      - MYSQL_USER=${MATOMO_DB_USER:-matomo}
      - MYSQL_PASSWORD=${MATOMO_DB_PASSWORD:-matomo_password}
    volumes:
      - matomo_mysql_data:/var/lib/mysql
    networks:
      - esportpro-network
    healthcheck:
      test: [ "CMD", "sh", "-c", "pgrep mariadbd" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  # Glitchtip Error Tracking
  glitchtip:
    image: glitchtip/glitchtip:latest
    container_name: esportpro-glitchtip
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgres://${GLITCHTIP_DB_USER:-glitchtip}:${GLITCHTIP_DB_PASSWORD:-glitchtip_password}@db:5432/${GLITCHTIP_DB_NAME:-glitchtip}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${GLITCHTIP_SECRET_KEY:-your-secret-key-here}
      - PORT=8000
      - EMAIL_URL=${GLITCHTIP_EMAIL_URL:-smtp://localhost:25}
      - GLITCHTIP_DOMAIN=https://sentry.${DOMAIN:-esportpro.cloud}
      - DEFAULT_FROM_EMAIL=${GLITCHTIP_FROM_EMAIL:-noreply@esportpro.cloud}
      - CELERY_WORKER_AUTOSCALE=1,3
      - CELERY_WORKER_MAX_TASKS_PER_CHILD=10000
    networks:
      - esportpro-network
    depends_on:
      - db
      - redis
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/_health/" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s


  glitchtip-worker:
    image: glitchtip/glitchtip:latest
    container_name: esportpro-glitchtip-worker
    restart: unless-stopped
    command: [ "./bin/run-celery-with-beat.sh" ]
    environment:
      - DATABASE_URL=postgres://${GLITCHTIP_DB_USER:-glitchtip}:${GLITCHTIP_DB_PASSWORD:-glitchtip_password}@db:5432/${GLITCHTIP_DB_NAME:-glitchtip}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${GLITCHTIP_SECRET_KEY:-your-secret-key-here}
      - EMAIL_URL=${GLITCHTIP_EMAIL_URL:-smtp://localhost:25}
      - GLITCHTIP_DOMAIN=https://sentry.${DOMAIN:-esportpro.cloud}
      - DEFAULT_FROM_EMAIL=${GLITCHTIP_FROM_EMAIL:-noreply@esportpro.cloud}
    networks:
      - esportpro-network
    depends_on:
      - db
      - redis
      - glitchtip

  redis:
    image: redis:7-alpine
    container_name: esportpro-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - esportpro-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local
  caddy_logs:
    driver: local
  app_logs:
    driver: local
  matomo_data:
    driver: local
  matomo_mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  esportpro-network:
    driver: bridge
